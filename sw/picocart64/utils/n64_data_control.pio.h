// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

#define CYCLE_MULTIPLIER 3
#define RW_HIGH_LOW_MIN_CYCLES 9
#define RW_DELAY_BEFORE_LOW_CYCLES 192
#define RW_STAY_LOW_BEFORE_HIGH_CYCLES 36
#define ALE_LOW_DELAY 18
#define DATA_SM_SIGNAL 4
#define CONTROL_SM_SIGNAL 5

// ---------------- //
// n64_data_control //
// ---------------- //

#define n64_data_control_wrap_target 0
#define n64_data_control_wrap 21

static const uint16_t n64_data_control_program_instructions[] = {
            //     .wrap_target
    0xff0a, //  0: set    pins, 10               [31]
    0xa542, //  1: nop                           [5] 
    0xf20b, //  2: set    pins, 11               [18]
    0xc005, //  3: irq    nowait 5                   
    0x20c4, //  4: wait   1 irq, 4                   
    0xb242, //  5: nop                           [18]
    0xe009, //  6: set    pins, 9                    
    0xc005, //  7: irq    nowait 5                   
    0x20c4, //  8: wait   1 irq, 4                   
    0xb242, //  9: nop                           [18]
    0xe000, // 10: set    pins, 0                    
    0xc005, // 11: irq    nowait 5                   
    0xbf42, // 12: nop                           [31]
    0xbf42, // 13: nop                           [31]
    0xbf42, // 14: nop                           [31]
    0xbf42, // 15: nop                           [31]
    0xbf42, // 16: nop                           [31]
    0xbf42, // 17: nop                           [31]
    0xe908, // 18: set    pins, 8                [9] 
    0xc005, // 19: irq    nowait 5                   
    0xe000, // 20: set    pins, 0                    
    0x000c, // 21: jmp    12                         
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program n64_data_control_program = {
    .instructions = n64_data_control_program_instructions,
    .length = 22,
    .origin = -1,
};

static inline pio_sm_config n64_data_control_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + n64_data_control_wrap_target, offset + n64_data_control_wrap);
    return c;
}

void n64_data_control_program_init(PIO pio, uint sm, uint offset) {
    // gpio16 -> 19 are control lines (ignore the cic stuff for now)
    for (int i = 16; i <= 19; i++) {
        pio_gpio_init(pio, i);
    }
    // gpio 16 -> 22
    pio_sm_set_consecutive_pindirs(pio, sm, 16, 4, true);
    pio_sm_config c = n64_data_control_program_get_default_config(offset);
    // Control line pins are all output lines
    sm_config_set_out_pins(&c, 16, 4);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

