// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

#define DATA_SM_SIGNAL 4
#define CONTROL_SM_SIGNAL 5

// --------------- //
// n64_data_tester //
// --------------- //

#define n64_data_tester_wrap_target 0
#define n64_data_tester_wrap 14

static const uint16_t n64_data_tester_program_instructions[] = {
            //     .wrap_target
    0xa0eb, //  0: mov    osr, !null                 
    0x6080, //  1: out    pindirs, 32                
    0x20c5, //  2: wait   1 irq, 5                   
    0x80a0, //  3: pull   block                      
    0x6010, //  4: out    pins, 16                   
    0xc004, //  5: irq    nowait 4                   
    0x20c5, //  6: wait   1 irq, 5                   
    0x6010, //  7: out    pins, 16                   
    0xc004, //  8: irq    nowait 4                   
    0x20c5, //  9: wait   1 irq, 5                   
    0xa0eb, // 10: mov    osr, !null                 
    0x6080, // 11: out    pindirs, 32                
    0x4010, // 12: in     pins, 16                   
    0x20c5, // 13: wait   1 irq, 5                   
    0x000c, // 14: jmp    12                         
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program n64_data_tester_program = {
    .instructions = n64_data_tester_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config n64_data_tester_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + n64_data_tester_wrap_target, offset + n64_data_tester_wrap);
    return c;
}

void n64_data_tester_program_init(PIO pio, uint sm, uint offset) {
    // gpio0 -> 15 input
    for (int i = 0; i <= 15; i++) {
        pio_gpio_init(pio, i);
    }
    // AD0 -> AD15 input
    // gpio 0 -> 22 are outputs for now
    pio_sm_set_consecutive_pindirs(pio, sm, 0, 16, true);
    pio_sm_config c = n64_data_tester_program_get_default_config(offset);
    // AD0 -> AD15 as IN pins
    sm_config_set_in_pins(&c, 0);
    // AD0 -> AD15 as OUT pins
    sm_config_set_out_pins(&c, 0, 16);
    pio_sm_init(pio, sm, offset, &c);
}

#endif

